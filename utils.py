import requests
import json
import os
import threading

#Get from .env file
username = os.getenv('GITHUB_USERNAME')
token = os.getenv('GITHUB_TOKEN')

if username is None:
    # Get from .env file
    from dotenv import load_dotenv
    load_dotenv()
    username = os.getenv('GITHUB_USERNAME')

if token is None:
    # Get from .env file
    from dotenv import load_dotenv
    load_dotenv()
    token = os.getenv('GITHUB_TOKEN')

if username is None or token is None:
    print("Error: GITHUB_USERNAME or GITHUB_TOKEN not found in .env file")
    exit(1)



HEADER_HELP = """
This file is generated by list-all-users.py
It's a list of all users in all of your repositories.
Do not modify the three first lines of each block.
You can edit the two last lines of each block to update the email/name.
You can delete a block if you don't want to update the email/name.
Be carrful, my code doesn't have a lot of syntaxic check, so be sure the syntax is correct. (Be carreful with the quotes)
"""

CARREFUL_LINE = "--> Delete this line before using the \"reatribute.py\" script"

LOCAL_FOLDER = "local_clone"

LOG_FOLDER = "./logs"

# Class user, with one email and a list of names
class User:
    def __init__(self, email, name, repo, new_name = None, new_email = None):
        self.email = email
        self.names = [name]
        self.repo = [repo]
        if new_name is not None:
            self.new_name = new_name
        if new_email is not None:
            self.new_email = new_email
    
    def add_name(self, name):
        if name not in self.names:
            self.names.append(name)
    
    def add_repo(self, repo):
        if repo not in self.repo:
            self.repo.append(repo)

    # True if new_name or new_email is not equal to name or email
    def modified(self):
        if len(self.names) > 1:
            return True
        if self.names[0] != self.new_name:
            return True
        if self.email != self.new_email:
            return True
        return False
    

    def __str__(self) -> str:

        return "=====================\n" + \
            "Email: \"" + self.email + "\"\n" + \
            "Names: \"" + '\", \"'.join(self.names) + "\"\n" + \
            "Repositories: \"" + '\", \"'.join(self.repo) + "\"\n\n" + \
            "New email: \"" + self.email + "\"\n" + \
            "New unique name: \"" + self.names[0] + "\"\n" + \
            "=====================\n"

    
    # Compare two users
    def __eq__(self, other):
        return self.email == other.email

# List all my repositories (with autorization token)
# https://api.github.com/search/repositories?q=user:USERNAME
def list_repos():
    repos_list = []
    url = "https://api.github.com/search/repositories?q=user:" + username
    # data = {"visibility": "all"}
    auth = ('token', token)
    r = requests.get(url, auth=auth)
    if r.status_code == 200:
        repos = json.loads(r.text or r.content)
        repos_list = repos['items']  
    else:
        print('Error: ' + str(r.status_code))
    return repos_list

# List all user for a given repository
# https://api.github.com/repos/USERNAME/REPO/commits
def list_users(repo):
    user_list = []
    url = "https://api.github.com/repos/" + username + "/" + repo["name"] + "/commits"
    auth = ('token', token)
    r = requests.get(url, auth=auth)
    if r.status_code == 200:
        commits = json.loads(r.text or r.content)
        for commit in commits:
            u = User(commit['commit']['author']['email'], commit['commit']['author']['name'], repo["ssh_url"])
            if u not in user_list:
                user_list.append(u)
            else:
                for user in user_list:
                    if user == u:
                        user.add_name(u.names[0])
    else:
        print('Error: ' + str(r.status_code))
    return user_list


# List all users for all repositories
def list_all_users():
    all_users = []
    repos = list_repos()
    for repo in repos:
        users = list_users(repo)
        for user in users:
            if user not in all_users:
                all_users.append(user)
            else :
                for u in all_users:
                    if u == user:
                        u.add_name(user.names[0])
                        u.add_repo(user.repo[0])
    return all_users

# Read all users from a file
def read_users(file):
    with open('emails.list', 'r') as f:
        lines = f.readlines()
        users = []
        
        mode = "START"

        for line in lines:
            if line.startswith('======') and (mode == "NOT_IN_BLOCK" or mode == "START"):
                mode = "IN_BLOCK"
            elif line.startswith('======') and mode == "NEW_NAME":
                mode = "NOT_IN_BLOCK"
            elif line.startswith('Email:'):
                mode = "EMAIL"
            elif line.startswith('Names:'):
                mode = "NAMES"
            elif line.startswith('Repositories:'):
                mode = "REPOS"
            elif line.startswith('New email:'):
                mode = "NEW_EMAIL"
            elif line.startswith('New unique name:'):
                mode = "NEW_NAME"
            # Si le ligne est vide
            elif line == "\n":
                continue

            if mode == "EMAIL":
                email = line.split('"')[1]
            elif mode == "NAMES":
                names = line.split('"')[1::2]
            elif mode == "REPOS":
                repo = line.split('"')[1::2]
            elif mode == "NEW_EMAIL":
                new_email = line.split('"')[1]
            elif mode == "NEW_NAME":
                new_name = line.split('"')[1]
            elif mode == "NOT_IN_BLOCK":
                u = User(email, names[0], repo[0], new_name, new_email)
                if u not in users:
                    for name in names[1:]:
                        u.add_name(name)
                    for r in repo:
                        u.add_repo(r)
                    users.append(u)
    return users


# Pull one repository to local folder
def clone_repo(repo, name, lock):
    # Create log folder if not exist
    
    # Atomic operation (lock)
    lock.acquire()
    if not os.path.exists(LOG_FOLDER):
        os.makedirs(LOG_FOLDER)
    lock.release()
    
    
    
        
    command = "git clone " + repo + " " + LOCAL_FOLDER + "/" + name
    res = os.system(command + " > " + LOG_FOLDER + "/" + name + ".log 2>&1")
    return res
